#pipeline:
#  build:	  
#    image: maven:3-jdk-8
#    commands: 
#      - "mvn package -B"
#    artifacts:
#      paths:
#        - target/*.jar
        
pipeline:
  build:	  
    image: maven:3-jdk-8
    commands: 
      - "mvn package -B"
    artifacts:
      paths:
        - target/*.war
    
    
  #static_scan:
  #  image: registry/sonar-scanner
  #  quality: OK
  #  secrets: [ sonar_host, sonar_token ] 
    
  
  codeCoverage-sonarQube:
    image: aosapps/drone-sonar-plugin:0.8
    quality: OK
    secrets: [ sonar_host, sonar_token ] 
  
  #code-coverage:
  #  image: aosapps/drone-sonar-plugin
  #  settings:
  #    sonar_host:
  #      from_secret: sonar_host
  #    sonar_token:
  #      from_secret: sonar_token
  
  gcr:
    image: plugins/gcr
    registry: eu.gcr.io
    repo: dronekubernetes/drone-java-spring
    tags: ["commit_${DRONE_COMMIT}","build_${DRONE_BUILD_NUMBER}", "latest"]
    secrets: [GOOGLE_CREDENTIALS]
   
    when:
      branch: master
      
  deploy:
    image: google/cloud-sdk:latest
    environment:
      PROJECT_ID: dronekubernetes
      COMPUTE_ZONE: us-east4-a
      CLUSTER_NAME: drone
    secrets: [GOOGLE_CREDENTIALS]
    commands:
      - yes | apt-get install python3
      - python3 generate_key.py drone-sa-keyfile.json
      #- echo "$GOOGLE_CREDENTIALS" > drone.json
      #- cp "$GOOGLE_CREDENTIALS" drone.json
      #- cat drone.json
      - gcloud auth activate-service-account --key-file drone-sa-keyfile.json
      - gcloud config set project $PROJECT_ID
      - gcloud config set compute/zone $COMPUTE_ZONE
      #- gcloud auth activate-service-account drone-sa@dronekubernetes.iam.gserviceaccount.com --key-file drone.json
      - gcloud container clusters get-credentials $CLUSTER_NAME
     # - kubectl set image deployment/dronekubernetes dronekubernetes=eu.gcr.io/${PROJECT_ID}/app:commit_${DRONE_COMMIT}
     
      - kubectl rollout history deployment/drone-java-spring-pipeline 
     
      - kubectl delete deployment drone-java-spring-pipeline    
      - kubectl delete service drone-java-spring-pipeline-service
          
      - kubectl run drone-java-spring-pipeline --image=eu.gcr.io/dronekubernetes/drone-java-spring:commit_${DRONE_COMMIT}
      - kubectl expose deployment drone-java-spring-pipeline --type=NodePort --port=80 --target-port=8080 --name=drone-java-spring-pipeline-service
      
    when:
      branch: master	
     # deployment: exists
      #service: exists
      
